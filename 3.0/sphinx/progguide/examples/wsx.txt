.. highlight:: python
   :linenothreshold: 0

WebSocket usage examples
========================

Sending messages to remote endpoints
------------------------------------

Create a new
:doc:`outgoing WebSocket connection <../../web-admin/outgoing/wsx>`
and send a message like in the example below.

::

   from zato.server.service import Service

   class MyService(Service):
       def handle(self):

           # Message to send - needs to be a string/unicode object
           msg = 'My message'

           # Name of the connection to send messages through
           conn_name = 'My WSX Endpoint'

           # Obtain a client from the connection pool
           with self.out.wsx.get(conn_name).conn.client() as client:

               # Send a message - note that there will be no response
               client.send(msg)

Invoking remote Zato services
-----------------------------

Receiving messages
------------------

Hook services - on connect and on close
---------------------------------------

No programming is needed to receive messages from remote WebSocket connections. Create a new
:doc:`ZeroMQ channel <../../web-admin/channels/zmq>`
and a given service will be invoked for each message taken from a socket.
The request will be in self.request.payload.

::

   from zato.server.service import Service

   class MyService(Service):
       def handle(self):
           self.logger.info('Got message: {}'.format(self.request.payload))


Sending  messages to sockets
----------------------------

Create a new
:doc:`outgoing ZeroMQ connection <../../web-admin/outgoing/zmq>`
and send a message like in the example below.

The API is documented :doc:`here <../outconn/zmq>`.

::

   from zato.server.service import Service

   class MyService(Service):
       def handle(self):
           self.outgoing.zmq.send('my-message', 'outconn-name')

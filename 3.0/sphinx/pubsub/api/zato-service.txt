Pub/sub - API - Zato services
=============================

Overview
--------

From the perspective of Zato service authors, publish/subscribe offers two methods for publications and reception
of messages:

======================== =======================================================================
Method                   Notes
======================== =======================================================================
self.pubsub.publish      Sends a message to input topic
self.pubsub.get_messages Receives all outstanding messages from input queue by subscription key
======================== =======================================================================

Both methods are able to make use of any topics or queues - this is because internally they use
the built-in *zato.pubsub.default.internal.endpoint* which is allowed to access any pub/sub objects.

Note that .get_messages expects a subscription key - this is because there may be multiple subscriptions
for each topic so the method needs to know from whose queue to returned the messages and it is subscription key
that points to each queue. Subscription keys are generated by API clients using, for instance, :doc:`REST <./rest>`
call.

Security-wise, both methods assume that the services that execute them have already carried out any necessary
input validation and authentication or authorization checks, i.e. the methods should be used in
trusted code paths because they potentially allow one to access any arbitrary topics and subscriptions.

self.pubsub.publish
-------------------

.. py:method:: self.pubsub.publish(topic_name, **kwargs)

   Publishes a message to input topic. All parameters are passed in as keyword arguments and all are optional,
   e.g. message ID does not have to be provided on input unless there is an actual need.

   :param str data: Business data being published
   :param str msg_id: Message ID - callers must ensure this is globally unique (such as UUID4)
   :param bool has_gd: Indicates if message should be covered by Guaranteed Delivery or not
   :param int priority: Message priority, 1-9 (1=min)
   :param int expiration: Message expiration in milliseconds
   :param str mime_type: MIME type of input data
   :param str correl_id: Correlation ID, if message is part of a broader series of messages
   :param str in_reply_to: Message ID of a message this message is a response to, if any
   :param str ext_client_id: An arbitrary string uniquely identifying the client application, or its instance,
                             on whose behalf the method is called
   :param str ext_pub_time: When the message was sent, as interpreted from the perspective of the calling application
   :return: Message ID, either automatically assigned or taken from input if it was provided
   :rtype: str

Sample service
~~~~~~~~~~~~~~

::

  # -*- coding: utf-8 -*-

  from __future__ import absolute_import, division, print_function, unicode_literals

  from zato.server.service import Service

  class PublishSample(Service):
      def handle(self):

          # Prepare input
          topic_name = '/zato/demo/sample'
          data = 'My data'
          priority = 9

          # Publish the message
          msg_id = self.pubsub.publish(topic_name, data=data, priority=priority)

          # Log the message ID received
          self.logger.info('Message ID is `%s`', msg_id)

::

  INFO - Message ID is `zpsmc53c2e078eafd1c476b49623`

.. image:: /gfx/pubsub/api/python-publish.png
  :width: 99%

self.pubsub.get_messages
------------------------

.. py:method:: self.pubsub.publish(topic_name, **kwargs)

   Publishes a message to input topic. All parameters are passed in as keyword arguments and all are optional,
   e.g. message ID does not have to be provided on input unless there is an actual need.

   :param str data: Business data being published
   :param str msg_id: Message ID - callers must ensure this is globally unique (such as UUID4)
   :param bool has_gd: Indicates if message should be covered by Guaranteed Delivery or not
   :param int priority: Message priority, 1-9 (1=min)
   :param int expiration: Message expiration in milliseconds
   :param str mime_type: MIME type of input data
   :param str correl_id: Correlation ID, if message is part of a broader series of messages
   :param str in_reply_to: Message ID of a message this message is a response to, if any
   :param str ext_client_id: An arbitrary string uniquely identifying the client application, or its instance,
                             on whose behalf the method is called
   :param str ext_pub_time: When the message was sent, as interpreted from the perspective of the calling application
   :return: Message ID, either automatically assigned or taken from input if it was provided
   :rtype: str
